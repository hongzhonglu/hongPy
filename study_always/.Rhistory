getMultipleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length( which (reaction_ko %in%  ko[i]))){
index <- which (reaction_ko %in%  ko[i])
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
getSingleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length(match(ko[i],reaction_ko))){
index <- match(ko[i],reaction_ko)
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
#part one
#prepare the reaction format
########small task###update the metabolites formula
#read the model
rxn <- read_excel("yeastGEM_latest version.xls",
sheet = "Reaction List")
metabolite <-  read_excel("yeastGEM_latest version.xls",
sheet = "Metabolite List")
splitAndCombine0 <- function(gene, rxn, sep0) { ##one rxn has several genes, this function was used to splite the genes
gene <- str_split(gene, sep0)
tt<- length(gene)
gene0 <- list()
for (i in 1:tt){
gene0[[i]] <- paste(rxn[i], gene[[i]], sep = "@@@")
}
gene1 <- unlist(gene0)
gene2 <- str_split(gene1, "@@@" )
rxnGene <- data.frame(v1=character(length(gene2)),stringsAsFactors = FALSE)
tt1 <- length(gene2)
for (j in 1:tt1){
rxnGene$v1[j] <- gene2[[j]][2]
rxnGene$v2[j] <- gene2[[j]][1]
}
return(rxnGene)
}
rxn_split <- splitAndCombine0(rxn$Reaction,rxn$Abbreviation,sep=" ")
rxn_split$v3 <- getSingleReactionFormula(metabolite$`Metabolite description`,metabolite$`Metabolite name`,rxn_split$v1)
for (i in 1:length(rxn_split$v2)){
if(rxn_split$v3[i]=="NA"){
rxn_split$v3[i] <- rxn_split$v1[i]
} else{
rxn_split$v3[i] <- rxn_split$v3[i]
}
}
# give the type: reactant and product for each metabolite
#for r_0001
rxn_split$v3 <- str_replace_all(rxn_split$v3,"->", "<=>")
getMetType <- function(rxnID, rxn_split){
ss <- which(rxn_split$v2 %in% rxnID==TRUE)
ss_split <- which(rxn_split$v2 %in% rxnID ==TRUE & rxn_split$v3 %in% "<=>" == TRUE)
met_type1 <- vector()
met_type2 <- vector()
for (i in ss[1]:(ss_split-1)){
met_type1[i-ss[1]+1] <- "reactant"
}
for (i in (ss_split):ss[length(ss)]){
met_type2[i-ss_split+1] <- "product"
}
met_type <- c(met_type1,met_type2)
return(met_type)
}
rxn_ID <- unique(rxn_split$v2)
met_type0 <- vector()
for (i in 1:length(rxn_ID)){
met_type0 <- c(met_type0, getMetType(rxn_ID[i],rxn_split))
}
rxn_split$type <- met_type0
rxn_split_refine <-rxn_split[which(str_detect(rxn_split$v3,"]")==TRUE),]
rxn_split_refine$metabolit_formula <- getSingleReactionFormula(metabolite$`Metabolite formula`,metabolite$`Metabolite description`,rxn_split_refine$v3)
rxn_split_refine$v3 <- str_replace_all(rxn_split_refine$v3,"<=>","->")
###get carbon number for each metabolite
getMetaboliteComposition <- function(MET,type="C"){
if (str_detect(MET, paste(type,"[0-9]+", sep=""))){
carbon_number<- str_extract_all(MET, paste(type,"[0-9]+", sep=""))
} else if (str_detect(MET, "C") & str_detect(MET, paste(type,"[0-9]+", sep=""))==FALSE ){
carbon_number <- str_extract_all(MET, "C")
} else{
carbon_number <- ""
}
return(carbon_number[[1]][1])
}
getCompositionNum <- function(MET,type="C"){
if (str_detect(MET, paste(type,"[0-9]+", sep=""))){
carbon_number<- str_extract_all(MET, "[0-9]+")
} else if (str_detect(MET, "C") & str_detect(MET, paste(type,"[0-9]+", sep=""))==FALSE ){
carbon_number <- "1"
} else{
carbon_number <- ""
}
return(carbon_number[[1]][1])
}
for (i in 1:length(rxn_split_refine$v2)){
rxn_split_refine$carbonCompostion[i] <- getMetaboliteComposition(rxn_split_refine$metabolit_formula[i])
}
for (i in 1:length(rxn_split_refine$v2)){
rxn_split_refine$carbonNumber[i] <- getCompositionNum(rxn_split_refine$carbonCompostion[i])
}
## Define the currency metabolite in each subsystem
rxn_system <- select(rxn,Abbreviation,Subsystem_new)
metabolite_withoutCompartment <- rxn_split_refine
metabolite_withoutCompartment$name_simple <-  str_replace_all(metabolite_withoutCompartment$v3,"\\[.*?\\]","")
metabolite_withoutCompartment$subsystem <- getSingleReactionFormula(rxn_system$Subsystem_new,rxn_system$Abbreviation,metabolite_withoutCompartment$v2)
library(stringr)
library(tidyverse)
library(readxl)
library(igraph)
library(networkD3)
###match
getMultipleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length( which (reaction_ko %in%  ko[i]))){
index <- which (reaction_ko %in%  ko[i])
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
getSingleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length(match(ko[i],reaction_ko))){
index <- match(ko[i],reaction_ko)
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
#part one
#prepare the reaction format
########small task###update the metabolites formula
#read the model
rxn <- read_excel("yeastGEM_latest version.xls",
sheet = "Reaction List")
metabolite <-  read_excel("yeastGEM_latest version.xls",
sheet = "Metabolite List")
splitAndCombine0 <- function(gene, rxn, sep0) { ##one rxn has several genes, this function was used to splite the genes
gene <- str_split(gene, sep0)
tt<- length(gene)
gene0 <- list()
for (i in 1:tt){
gene0[[i]] <- paste(rxn[i], gene[[i]], sep = "@@@")
}
gene1 <- unlist(gene0)
gene2 <- str_split(gene1, "@@@" )
rxnGene <- data.frame(v1=character(length(gene2)),stringsAsFactors = FALSE)
tt1 <- length(gene2)
for (j in 1:tt1){
rxnGene$v1[j] <- gene2[[j]][2]
rxnGene$v2[j] <- gene2[[j]][1]
}
return(rxnGene)
}
rxn_split <- splitAndCombine0(rxn$Reaction,rxn$Abbreviation,sep=" ")
rxn_split$v3 <- getSingleReactionFormula(metabolite$`Metabolite description`,metabolite$`Metabolite name`,rxn_split$v1)
for (i in 1:length(rxn_split$v2)){
if(rxn_split$v3[i]=="NA"){
rxn_split$v3[i] <- rxn_split$v1[i]
} else{
rxn_split$v3[i] <- rxn_split$v3[i]
}
}
# give the type: reactant and product for each metabolite
#for r_0001
rxn_split$v3 <- str_replace_all(rxn_split$v3,"->", "<=>")
getMetType <- function(rxnID, rxn_split){
ss <- which(rxn_split$v2 %in% rxnID==TRUE)
ss_split <- which(rxn_split$v2 %in% rxnID ==TRUE & rxn_split$v3 %in% "<=>" == TRUE)
met_type1 <- vector()
met_type2 <- vector()
for (i in ss[1]:(ss_split-1)){
met_type1[i-ss[1]+1] <- "reactant"
}
for (i in (ss_split):ss[length(ss)]){
met_type2[i-ss_split+1] <- "product"
}
met_type <- c(met_type1,met_type2)
return(met_type)
}
rxn_ID <- unique(rxn_split$v2)
met_type0 <- vector()
for (i in 1:length(rxn_ID)){
met_type0 <- c(met_type0, getMetType(rxn_ID[i],rxn_split))
}
rxn_split$type <- met_type0
rxn_split_refine <-rxn_split[which(str_detect(rxn_split$v3,"]")==TRUE),]
rxn_split_refine$metabolit_formula <- getSingleReactionFormula(metabolite$`Metabolite formula`,metabolite$`Metabolite description`,rxn_split_refine$v3)
rxn_split_refine$v3 <- str_replace_all(rxn_split_refine$v3,"<=>","->")
###get carbon number for each metabolite
getMetaboliteComposition <- function(MET,type="C"){
if (str_detect(MET, paste(type,"[0-9]+", sep=""))){
carbon_number<- str_extract_all(MET, paste(type,"[0-9]+", sep=""))
} else if (str_detect(MET, "C") & str_detect(MET, paste(type,"[0-9]+", sep=""))==FALSE ){
carbon_number <- str_extract_all(MET, "C")
} else{
carbon_number <- ""
}
return(carbon_number[[1]][1])
}
getCompositionNum <- function(MET,type="C"){
if (str_detect(MET, paste(type,"[0-9]+", sep=""))){
carbon_number<- str_extract_all(MET, "[0-9]+")
} else if (str_detect(MET, "C") & str_detect(MET, paste(type,"[0-9]+", sep=""))==FALSE ){
carbon_number <- "1"
} else{
carbon_number <- ""
}
return(carbon_number[[1]][1])
}
for (i in 1:length(rxn_split_refine$v2)){
rxn_split_refine$carbonCompostion[i] <- getMetaboliteComposition(rxn_split_refine$metabolit_formula[i])
}
for (i in 1:length(rxn_split_refine$v2)){
rxn_split_refine$carbonNumber[i] <- getCompositionNum(rxn_split_refine$carbonCompostion[i])
}
## Define the currency metabolite in each subsystem
rxn_system <- select(rxn,Abbreviation,Subsystem_new)
metabolite_withoutCompartment <- rxn_split_refine
metabolite_withoutCompartment$name_simple <-  str_replace_all(metabolite_withoutCompartment$v3,"\\[.*?\\]","")
metabolite_withoutCompartment$subsystem <- getSingleReactionFormula(rxn_system$Subsystem_new,rxn_system$Abbreviation,metabolite_withoutCompartment$v2)
library(readxl)
library(tidyverse)
library(stringr)
splitAndCombine <- function(gene, rxn,sep0) { ##one rxn has several genes, this function was used to splite the genes
gene <- str_split(gene, sep0)
tt<- length(gene)
gene0 <- list()
for (i in 1:tt){
gene0[[i]] <- paste(rxn[i], gene[[i]], sep = "@@@")
}
gene1 <- unique(unlist(gene0))
gene2 <- str_split(gene1, "@@@" )
rxnGene <- data.frame(v1=character(length(gene2)),stringsAsFactors = FALSE)
tt1 <- length(gene2)
for (j in 1:tt1){
rxnGene$v1[j] <- gene2[[j]][2]
rxnGene$v2[j] <- gene2[[j]][1]
}
return(rxnGene)
}
getSingleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length(match(ko[i],reaction_ko))){
index <- match(ko[i],reaction_ko)
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
# input gene expression data
wild <- read.table('CENPK_subOut_wt.txt', sep = "\t", header = TRUE, stringsAsFactors = FALSE)
mutant <- read.table('CENPK_subOut_Stb5d.txt', sep = "\t", header = TRUE, stringsAsFactors = FALSE)
wild_gluc <- wild[,16:18]
wild_gluc$geneID <- wild[,1]
mutant_gluc <- mutant[,16:18]
mutant_gluc$geneID <- mutant[,1]
combine <- merge(wild_gluc,mutant_gluc, by.x = "geneID", by.y = "geneID", all = TRUE)
wild <- data.matrix(combine[,2:4])
mutant <- data.matrix(combine[,5:7])
# compare the mutant with original
combine$Z_score <- (rowMeans(combine[,5:7],na.rm = TRUE)-rowMeans(combine[,2:4],na.rm = TRUE))/sqrt(apply(wild, 1, var)+apply(mutant, 1, var))
# input model and flux balance analysis resulsts
imm904 <- read_excel("corrected iMM904 cofactor constraints.xls", sheet = "flux")
flux <- read_excel("corrected iMM904 cofactor constraints.xls", sheet = "flux")
flux <- flux[,-(9:10)]
gpr <- read_excel("corrected iMM904 cofactor constraints.xls", sheet = "Reaction List")
gpr <- select(gpr,Abbreviation,GPR)
# relation extract
gpr$or <- str_detect(gpr$GPR,"or")
gpr$and <- str_detect(gpr$GPR,"and")
filter(gpr, gpr$or==FALSE & is.na((gpr$and)))
# or TRUE; and FALSE
group2  <- filter(gpr, gpr$or==TRUE & gpr$and==FALSE) # only or relation, 算术平均
group20_split <- splitAndCombine(group2$GPR, group2$Abbreviation, sep0 = " or ")
group20_split$v1 <- str_replace_all(group20_split$v1,"\\(", "") %>%
str_replace_all(.,"\\( ","") %>%
str_replace_all(.,"\\)","") %>%
str_replace_all(.," \\)","")
group20_split <- select(group20_split, v2, v1)
colnames(group20_split) <- c("Abbreviation","GPR")
group20_split$GPR <- str_trim(group20_split$GPR, side="both")
# give expression value
group20_split$CENPK_wt_Glu_1.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_1.sorted.bam,wild_gluc$geneID,group20_split$GPR)
group20_split$CENPK_wt_Glu_2.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_2.sorted.bam,wild_gluc$geneID,group20_split$GPR)
group20_split$CENPK_wt_Glu_3.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_3.sorted.bam,wild_gluc$geneID,group20_split$GPR)
group20_split$CENPK_STB5d_Glu_1.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_1.sorted.bam,mutant_gluc$geneID,group20_split$GPR)
group20_split$CENPK_STB5d_Glu_2.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_2.sorted.bam,mutant_gluc$geneID,group20_split$GPR)
group20_split$CENPK_STB5d_Glu_3.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_3.sorted.bam,mutant_gluc$geneID,group20_split$GPR)
# obtain the average value of gene belong to a reaction
# the function was used get the average value from genes with the only or relations
getExpressionMean <- function(rxn,group = group20_split){
#rxn <- "13BGHe"
index0 <- which(group$Abbreviation %in% rxn == TRUE)
gene_rxn <- group[index0,]
gene_rxn0 <- gene_rxn[1,]
a1 <- as.numeric(gene_rxn$CENPK_wt_Glu_1.sorted.bam)
a2 <- as.numeric(gene_rxn$CENPK_wt_Glu_2.sorted.bam)
a3 <- as.numeric(gene_rxn$CENPK_wt_Glu_3.sorted.bam)
a1 <- a1[is.finite(a1)]
a2 <- a1[is.finite(a2)]
a3 <- a1[is.finite(a3)]
b1 <- as.numeric(gene_rxn$CENPK_STB5d_Glu_1.sorted.bam)
b2 <- as.numeric(gene_rxn$CENPK_STB5d_Glu_2.sorted.bam)
b3 <- as.numeric(gene_rxn$CENPK_STB5d_Glu_3.sorted.bam)
b1 <- b1[is.finite(b1)]
b2 <- b2[is.finite(b2)]
b3 <- b3[is.finite(b3)]
gene_rxn0$CENPK_wt_Glu_1.sorted.bam <- mean(a1, na.rm = TRUE)
gene_rxn0$CENPK_wt_Glu_2.sorted.bam <- mean(a2, na.rm = TRUE)
gene_rxn0$CENPK_wt_Glu_3.sorted.bam <- mean(a3, na.rm = TRUE)
gene_rxn0$CENPK_STB5d_Glu_1.sorted.bam <- mean(b1, na.rm = TRUE)
gene_rxn0$CENPK_STB5d_Glu_2.sorted.bam <- mean(b2, na.rm = TRUE)
gene_rxn0$CENPK_STB5d_Glu_3.sorted.bam <- mean(b3, na.rm = TRUE)
gene_rxn0 <- gene_rxn0[,-2]
return(gene_rxn0)
}
##get average value for all genes with or relations
g20 <- getExpressionMean(rxn = group2$Abbreviation[1])
for (i in (2:length(group2$Abbreviation))){
g20 <- rbind.data.frame(g20,getExpressionMean(group2$Abbreviation[i]))
}
# or FALSE; and TRUE
group3  <- filter(gpr, gpr$or==FALSE & gpr$and==TRUE) # only and relation, 几何平均值 或最小值
group30_split <- splitAndCombine(group3$GPR, group3$Abbreviation, sep0 = " and ")
group30_split$v1 <- str_replace_all(group30_split$v1,"\\(", "") %>%
str_replace_all(.,"\\( ","") %>%
str_replace_all(.,"\\)","") %>%
str_replace_all(.," \\)","")
group30_split <- select(group30_split, v2, v1)
colnames(group30_split) <- c("Abbreviation","GPR")
group30_split$GPR <- str_trim(group30_split$GPR, side="both")
group30_split$CENPK_wt_Glu_1.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_1.sorted.bam,wild_gluc$geneID,group30_split$GPR)
group30_split$CENPK_wt_Glu_2.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_2.sorted.bam,wild_gluc$geneID,group30_split$GPR)
group30_split$CENPK_wt_Glu_3.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_3.sorted.bam,wild_gluc$geneID,group30_split$GPR)
group30_split$CENPK_STB5d_Glu_1.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_1.sorted.bam,mutant_gluc$geneID,group30_split$GPR)
group30_split$CENPK_STB5d_Glu_2.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_2.sorted.bam,mutant_gluc$geneID,group30_split$GPR)
group30_split$CENPK_STB5d_Glu_3.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_3.sorted.bam,mutant_gluc$geneID,group30_split$GPR)
# the function was used get the min value from genes with the only and relations
getExpressionMin <- function(rxn,group = group30_split){
#rxn <- "13BGHe"
index0 <- which(group$Abbreviation %in% rxn == TRUE)
gene_rxn <- group[index0,]
gene_rxn0 <- gene_rxn[1,]
gene_rxn0$CENPK_wt_Glu_1.sorted.bam <- min(as.numeric(gene_rxn$CENPK_wt_Glu_1.sorted.bam), na.rm = TRUE)
gene_rxn0$CENPK_wt_Glu_2.sorted.bam <- min(as.numeric(gene_rxn$CENPK_wt_Glu_2.sorted.bam), na.rm = TRUE)
gene_rxn0$CENPK_wt_Glu_3.sorted.bam <- min(as.numeric(gene_rxn$CENPK_wt_Glu_3.sorted.bam), na.rm = TRUE)
gene_rxn0$CENPK_STB5d_Glu_1.sorted.bam <- min(as.numeric(gene_rxn$CENPK_STB5d_Glu_1.sorted.bam), na.rm = TRUE)
gene_rxn0$CENPK_STB5d_Glu_2.sorted.bam <- min(as.numeric(gene_rxn$CENPK_STB5d_Glu_2.sorted.bam), na.rm = TRUE)
gene_rxn0$CENPK_STB5d_Glu_3.sorted.bam <- min(as.numeric(gene_rxn$CENPK_STB5d_Glu_3.sorted.bam), na.rm = TRUE)
gene_rxn0 <- gene_rxn0[,-2]
return(gene_rxn0)
}
##get all value for gene with and relations
g30 <- getExpressionMin(rxn = group3$Abbreviation[1])
for (i in (2:length(group3$Abbreviation))){
g30 <- rbind.data.frame(g30,getExpressionMin(group3$Abbreviation[i]))
}
# or FALSE; and FALSE
group4  <- filter(gpr, gpr$or==FALSE & gpr$and==FALSE) # single gene
group4$CENPK_wt_Glu_1.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_1.sorted.bam,wild_gluc$geneID,group4$GPR)
group4$CENPK_wt_Glu_2.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_2.sorted.bam,wild_gluc$geneID,group4$GPR)
group4$CENPK_wt_Glu_3.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_3.sorted.bam,wild_gluc$geneID,group4$GPR)
group4$CENPK_STB5d_Glu_1.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_1.sorted.bam,mutant_gluc$geneID,group4$GPR)
group4$CENPK_STB5d_Glu_2.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_2.sorted.bam,mutant_gluc$geneID,group4$GPR)
group4$CENPK_STB5d_Glu_3.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_3.sorted.bam,mutant_gluc$geneID,group4$GPR)
g40 <- group4[,-(2:4)]
# or NA; and NA
group5 <- filter(gpr, is.na(gpr$or) & is.na(gpr$and)) # can't find regulation
# or TRUE; and TRUE
group1  <- filter(gpr, gpr$or==TRUE & gpr$and==TRUE)  # have or , and;
group10_split <- splitAndCombine(group1$GPR, group1$Abbreviation, sep0 = " or ")
group10_split$v1 <- str_replace_all(group10_split$v1,"\\(", "") %>%
str_replace_all(.,"\\( ","") %>%
str_replace_all(.,"\\)","") %>%
str_replace_all(.," \\)","")
group10_split <- select(group10_split, v2, v1)
colnames(group10_split) <- c("Abbreviation","GPR")
for (i in seq(length(group10_split$Abbreviation))){
group10_split$Abbreviation0[i] <- paste(group10_split$Abbreviation[i], i, sep = "@or")
}
group10_split2 <- splitAndCombine(group10_split$GPR, group10_split$Abbreviation0, sep0 = " and ")
group10_split2 <- select(group10_split2, v2, v1)
colnames(group10_split2) <- c("Abbreviation","GPR")
group10_split2$GPR <- str_trim(group10_split2$GPR, side="both")
group10_split2$CENPK_wt_Glu_1.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_1.sorted.bam,wild_gluc$geneID,group10_split2$GPR)
group10_split2$CENPK_wt_Glu_2.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_2.sorted.bam,wild_gluc$geneID,group10_split2$GPR)
group10_split2$CENPK_wt_Glu_3.sorted.bam <- getSingleReactionFormula(wild_gluc$CENPK_wt_Glu_3.sorted.bam,wild_gluc$geneID,group10_split2$GPR)
group10_split2$CENPK_STB5d_Glu_1.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_1.sorted.bam,mutant_gluc$geneID,group10_split2$GPR)
group10_split2$CENPK_STB5d_Glu_2.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_2.sorted.bam,mutant_gluc$geneID,group10_split2$GPR)
group10_split2$CENPK_STB5d_Glu_3.sorted.bam <-getSingleReactionFormula(mutant_gluc$CENPK_STB5d_Glu_3.sorted.bam,mutant_gluc$geneID,group10_split2$GPR)
## step1 get min value of gene with and relation
##get all min value for gene with and relations
g10_and <- getExpressionMin(rxn = group10_split$Abbreviation0[1], group = group10_split2)
for (i in (2:length(group10_split$Abbreviation0))){
g10_and <- rbind.data.frame(g10_and,getExpressionMin(group10_split$Abbreviation0[i],group = group10_split2))
}
## step2 get min value of gene with and relation
##get average value for gene with or relations
g10_and <- g10_and %>%
separate(Abbreviation, c("Abbreviation","relation"),"@")
g10 <- getExpressionMean(rxn = group1$Abbreviation[1], group = g10_and)
for (i in (2:length(group1$Abbreviation))){
g10 <- rbind.data.frame(g10, getExpressionMean(group1$Abbreviation[i],group = g10_and))
}
# merge all the above reactions with genes
gpr_new <- rbind.data.frame(g10,g20,g30,g40)
gpr_new <- filter(gpr_new, CENPK_wt_Glu_1.sorted.bam !="NA")
gpr_new <- filter(gpr_new, CENPK_STB5d_Glu_1.sorted.bam !="NA")
wild_new <- data.matrix(gpr_new[,2:4])
mutant_new <- data.matrix(gpr_new[,5:7])
# compare the mutant with original
gpr_new$expression_Z_score <- (rowMeans(mutant_new,na.rm = TRUE)-rowMeans(wild_new,na.rm = TRUE))/sqrt(apply(wild_new, 1, var)+apply(mutant_new, 1, var))
# input flux sampling analysis results
wild_s <- read.table('X1_wild.txt', sep = "\t", header = FALSE, stringsAsFactors = FALSE)
mutant_s <- read.table('X1_mutant.txt', sep = "\t", header = FALSE, stringsAsFactors = FALSE)
# compare the mutant with original in flux sampling
wild_s0 <- data.matrix(wild_s)
mutant_s0 <- data.matrix(mutant_s)
flux$Z_score <- (rowMeans(mutant_s0,na.rm = TRUE)-rowMeans(wild_s0,na.rm = TRUE))/sqrt(apply(wild_s0, 1, var)+apply(mutant_s0, 1, var))
index1 <- which( is.finite(flux$Z_score) == FALSE)
flux <- flux[-index1,]
flux$Z_score <- as.numeric(flux$Z_score)
# combine the gene expression Z score and flux Z score
gpr_new$flux_Z_score <- getSingleReactionFormula(flux$Z_score,flux$Abbreviation,gpr_new$Abbreviation)
# filter both expression Z score is minus and flux Z score is also minus
gpr_new1 <- filter(gpr_new, gpr_new$expression_Z_score < 0 & gpr_new$flux_Z_score < 0)
# filter both expression Z score is positive and flux Z score is also positive
gpr_new2 <- filter(gpr_new, gpr_new$expression_Z_score > 0 & gpr_new$flux_Z_score > 0)
gpr_new2 <- filter(gpr_new2, flux_Z_score !="NA")
x <- seq(-20,20,by=.1)
y <- pnorm(x)
plot(x,y)
pnorm(3)
abline(v=3, col="red")
gpr_new1$Ptri = pnorm(-gpr_new1$expression_Z_score)*pnorm(-as.numeric(gpr_new1$flux_Z_score))
gpr_new2$Ptri = pnorm(gpr_new2$expression_Z_score)*pnorm(as.numeric(gpr_new2$flux_Z_score))
## combine the above final results
gpr_with_regulation <- rbind.data.frame(gpr_new1, gpr_new2)
imm904_with_regulation <- merge(imm904, gpr_with_regulation, by.x = "Abbreviation", by.y = "Abbreviation", all.x = TRUE)
write.table(imm904_with_regulation,"imm904_with_regulation.txt", row.names = FALSE, sep="\t")
library(readxl)
library(stringr)
library(tidyverse)
getSingleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length(match(ko[i],reaction_ko))){
index <- match(ko[i],reaction_ko)
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
getMultipleReactionFormula <- function(description, reaction_ko, ko) {###description can be any charater of metabolite
index <- vector()
result <- vector()
tt <- vector()
for (i in 1:length(ko)){
if(length( which (reaction_ko %in%  ko[i]))){
index <- which (reaction_ko %in%  ko[i])
tt <- description[index]
result[i] <- paste0(tt, collapse = ";")
} else{
result[i] <- NA
}
}
return(result)
}
metanetx_met <- read_tsv("chem_prop_metanetx.tsv")
metanetx_metref <- read_tsv("chem_xref.tsv") ### MNX_ID and other ID mapping
metanetx_rxn <- read_tsv("reac_prop_metanetx.tsv")
